
name: Deploy Keyvault ACME Cert Bot

on:
  push:
    branches: ["master"]
    paths-ignore:
      - '.github/workflows/**'

permissions:
  id-token: write # Require write permission to Fetch an OIDC token.
  contents: read

env:
  additional_tf_vars: '-var "cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"'
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}

jobs:
  TerraformPlan:
    runs-on: ubuntu-latest # For Linux, use ubuntu-latest
    environment: 'dev'
    steps:
    - name: Set up WireGuard Connection
      # uses: niklaskeerl/easy-wireguard-action@v2
      run: |
        sudo apt install resolvconf
        sudo apt install wireguard
        echo "${{ secrets.WG_CONFIG_FILE }}" > wg0.conf
        sudo chmod 600 wg0.conf
        echo "setting config"
        sudo wg-quick up ./wg0.conf
      shell: bash

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v5

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./IaC

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./IaC

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out tf_plan.tfplan -input=false ${{ env.additional_tf_vars }}
      working-directory: ./IaC

  TerraformDeploy:
    runs-on: ubuntu-latest
    environment: 'deploy'
    needs: TerraformPlan
    if: needs.TerraformPlan.result == 'success'
    steps:
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false ${{ env.additional_tf_vars }}
